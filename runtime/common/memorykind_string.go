// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBoolValue-1]
	_ = x[MemoryKindAddressValue-2]
	_ = x[MemoryKindStringValue-3]
	_ = x[MemoryKindCharacterValue-4]
	_ = x[MemoryKindNumberValue-5]
	_ = x[MemoryKindArrayValueBase-6]
	_ = x[MemoryKindDictionaryValueBase-7]
	_ = x[MemoryKindCompositeValueBase-8]
	_ = x[MemoryKindSimpleCompositeValueBase-9]
	_ = x[MemoryKindOptionalValue-10]
	_ = x[MemoryKindNilValue-11]
	_ = x[MemoryKindVoidValue-12]
	_ = x[MemoryKindTypeValue-13]
	_ = x[MemoryKindPathValue-14]
	_ = x[MemoryKindCapabilityValue-15]
	_ = x[MemoryKindLinkValue-16]
	_ = x[MemoryKindStorageReferenceValue-17]
	_ = x[MemoryKindEphemeralReferenceValue-18]
	_ = x[MemoryKindInterpretedFunctionValue-19]
	_ = x[MemoryKindHostFunctionValue-20]
	_ = x[MemoryKindBoundFunctionValue-21]
	_ = x[MemoryKindBigInt-22]
	_ = x[MemoryKindSimpleCompositeValue-23]
	_ = x[MemoryKindAtreeArrayDataSlab-24]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-25]
	_ = x[MemoryKindAtreeArrayElementOverhead-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-30]
	_ = x[MemoryKindAtreeEncodedSlab-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindRestrictedStaticType-39]
	_ = x[MemoryKindReferenceStaticType-40]
	_ = x[MemoryKindCapabilityStaticType-41]
	_ = x[MemoryKindFunctionStaticType-42]
	_ = x[MemoryKindCadenceVoidValue-43]
	_ = x[MemoryKindCadenceOptionalValue-44]
	_ = x[MemoryKindCadenceBoolValue-45]
	_ = x[MemoryKindCadenceStringValue-46]
	_ = x[MemoryKindCadenceCharacterValue-47]
	_ = x[MemoryKindCadenceAddressValue-48]
	_ = x[MemoryKindCadenceIntValue-49]
	_ = x[MemoryKindCadenceNumberValue-50]
	_ = x[MemoryKindCadenceArrayValueBase-51]
	_ = x[MemoryKindCadenceArrayValueLength-52]
	_ = x[MemoryKindCadenceDictionaryValue-53]
	_ = x[MemoryKindCadenceKeyValuePair-54]
	_ = x[MemoryKindCadenceStructValueBase-55]
	_ = x[MemoryKindCadenceStructValueSize-56]
	_ = x[MemoryKindCadenceResourceValueBase-57]
	_ = x[MemoryKindCadenceResourceValueSize-58]
	_ = x[MemoryKindCadenceEventValueBase-59]
	_ = x[MemoryKindCadenceEventValueSize-60]
	_ = x[MemoryKindCadenceContractValueBase-61]
	_ = x[MemoryKindCadenceContractValueSize-62]
	_ = x[MemoryKindCadenceEnumValueBase-63]
	_ = x[MemoryKindCadenceEnumValueSize-64]
	_ = x[MemoryKindCadenceLinkValue-65]
	_ = x[MemoryKindCadencePathValue-66]
	_ = x[MemoryKindCadenceTypeValue-67]
	_ = x[MemoryKindCadenceCapabilityValue-68]
	_ = x[MemoryKindCadenceSimpleType-69]
	_ = x[MemoryKindCadenceOptionalType-70]
	_ = x[MemoryKindCadenceVariableSizedArrayType-71]
	_ = x[MemoryKindCadenceConstantSizedArrayType-72]
	_ = x[MemoryKindCadenceDictionaryType-73]
	_ = x[MemoryKindCadenceField-74]
	_ = x[MemoryKindCadenceParameter-75]
	_ = x[MemoryKindCadenceStructType-76]
	_ = x[MemoryKindCadenceResourceType-77]
	_ = x[MemoryKindCadenceEventType-78]
	_ = x[MemoryKindCadenceContractType-79]
	_ = x[MemoryKindCadenceStructInterfaceType-80]
	_ = x[MemoryKindCadenceResourceInterfaceType-81]
	_ = x[MemoryKindCadenceContractInterfaceType-82]
	_ = x[MemoryKindCadenceFunctionType-83]
	_ = x[MemoryKindCadenceReferenceType-84]
	_ = x[MemoryKindCadenceRestrictedType-85]
	_ = x[MemoryKindCadenceCapabilityType-86]
	_ = x[MemoryKindCadenceEnumType-87]
	_ = x[MemoryKindRawString-88]
	_ = x[MemoryKindAddressLocation-89]
	_ = x[MemoryKindBytes-90]
	_ = x[MemoryKindVariable-91]
	_ = x[MemoryKindCompositeTypeInfo-92]
	_ = x[MemoryKindCompositeField-93]
	_ = x[MemoryKindInvocation-94]
	_ = x[MemoryKindStorageMap-95]
	_ = x[MemoryKindStorageKey-96]
	_ = x[MemoryKindValueToken-97]
	_ = x[MemoryKindSyntaxToken-98]
	_ = x[MemoryKindSpaceToken-99]
	_ = x[MemoryKindProgram-100]
	_ = x[MemoryKindIdentifier-101]
	_ = x[MemoryKindArgument-102]
	_ = x[MemoryKindBlock-103]
	_ = x[MemoryKindFunctionBlock-104]
	_ = x[MemoryKindParameter-105]
	_ = x[MemoryKindParameterList-106]
	_ = x[MemoryKindTransfer-107]
	_ = x[MemoryKindMembers-108]
	_ = x[MemoryKindTypeAnnotation-109]
	_ = x[MemoryKindDictionaryEntry-110]
	_ = x[MemoryKindFunctionDeclaration-111]
	_ = x[MemoryKindCompositeDeclaration-112]
	_ = x[MemoryKindExtensionDeclaration-113]
	_ = x[MemoryKindInterfaceDeclaration-114]
	_ = x[MemoryKindEnumCaseDeclaration-115]
	_ = x[MemoryKindFieldDeclaration-116]
	_ = x[MemoryKindTransactionDeclaration-117]
	_ = x[MemoryKindImportDeclaration-118]
	_ = x[MemoryKindVariableDeclaration-119]
	_ = x[MemoryKindSpecialFunctionDeclaration-120]
	_ = x[MemoryKindPragmaDeclaration-121]
	_ = x[MemoryKindAssignmentStatement-122]
	_ = x[MemoryKindBreakStatement-123]
	_ = x[MemoryKindContinueStatement-124]
	_ = x[MemoryKindEmitStatement-125]
	_ = x[MemoryKindExpressionStatement-126]
	_ = x[MemoryKindForStatement-127]
	_ = x[MemoryKindIfStatement-128]
	_ = x[MemoryKindReturnStatement-129]
	_ = x[MemoryKindSwapStatement-130]
	_ = x[MemoryKindSwitchStatement-131]
	_ = x[MemoryKindWhileStatement-132]
	_ = x[MemoryKindRemoveStatement-133]
	_ = x[MemoryKindBooleanExpression-134]
	_ = x[MemoryKindNilExpression-135]
	_ = x[MemoryKindStringExpression-136]
	_ = x[MemoryKindIntegerExpression-137]
	_ = x[MemoryKindFixedPointExpression-138]
	_ = x[MemoryKindArrayExpression-139]
	_ = x[MemoryKindDictionaryExpression-140]
	_ = x[MemoryKindIdentifierExpression-141]
	_ = x[MemoryKindInvocationExpression-142]
	_ = x[MemoryKindMemberExpression-143]
	_ = x[MemoryKindIndexExpression-144]
	_ = x[MemoryKindConditionalExpression-145]
	_ = x[MemoryKindUnaryExpression-146]
	_ = x[MemoryKindBinaryExpression-147]
	_ = x[MemoryKindFunctionExpression-148]
	_ = x[MemoryKindCastingExpression-149]
	_ = x[MemoryKindCreateExpression-150]
	_ = x[MemoryKindDestroyExpression-151]
	_ = x[MemoryKindReferenceExpression-152]
	_ = x[MemoryKindForceExpression-153]
	_ = x[MemoryKindPathExpression-154]
	_ = x[MemoryKindExtendExpression-155]
	_ = x[MemoryKindConstantSizedType-156]
	_ = x[MemoryKindDictionaryType-157]
	_ = x[MemoryKindFunctionType-158]
	_ = x[MemoryKindInstantiationType-159]
	_ = x[MemoryKindNominalType-160]
	_ = x[MemoryKindOptionalType-161]
	_ = x[MemoryKindReferenceType-162]
	_ = x[MemoryKindRestrictedType-163]
	_ = x[MemoryKindExtendedType-164]
	_ = x[MemoryKindVariableSizedType-165]
	_ = x[MemoryKindPosition-166]
	_ = x[MemoryKindRange-167]
	_ = x[MemoryKindElaboration-168]
	_ = x[MemoryKindActivation-169]
	_ = x[MemoryKindActivationEntries-170]
	_ = x[MemoryKindVariableSizedSemaType-171]
	_ = x[MemoryKindConstantSizedSemaType-172]
	_ = x[MemoryKindDictionarySemaType-173]
	_ = x[MemoryKindOptionalSemaType-174]
	_ = x[MemoryKindRestrictedSemaType-175]
	_ = x[MemoryKindReferenceSemaType-176]
	_ = x[MemoryKindCapabilitySemaType-177]
	_ = x[MemoryKindOrderedMap-178]
	_ = x[MemoryKindOrderedMapEntryList-179]
	_ = x[MemoryKindOrderedMapEntry-180]
	_ = x[MemoryKindLast-181]
}

const _MemoryKind_name = "UnknownBoolValueAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueNilValueVoidValueTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceResourceValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadenceLinkValueCadencePathValueCadenceTypeValueCadenceCapabilityValueCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyValueTokenSyntaxTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationExtensionDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionExtendExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeExtendedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 16, 28, 39, 53, 64, 78, 97, 115, 139, 152, 160, 169, 178, 187, 202, 211, 232, 255, 279, 296, 314, 320, 340, 358, 380, 405, 421, 441, 464, 491, 507, 526, 545, 564, 587, 610, 630, 648, 668, 687, 707, 725, 741, 761, 777, 795, 816, 835, 850, 868, 889, 912, 934, 953, 975, 997, 1021, 1045, 1066, 1087, 1111, 1135, 1155, 1175, 1191, 1207, 1223, 1245, 1262, 1281, 1310, 1339, 1360, 1372, 1388, 1405, 1424, 1440, 1459, 1485, 1513, 1541, 1560, 1580, 1601, 1622, 1637, 1646, 1661, 1666, 1674, 1691, 1705, 1715, 1725, 1735, 1745, 1756, 1766, 1773, 1783, 1791, 1796, 1809, 1818, 1831, 1839, 1846, 1860, 1875, 1894, 1914, 1934, 1954, 1973, 1989, 2011, 2028, 2047, 2073, 2090, 2109, 2123, 2140, 2153, 2172, 2184, 2195, 2210, 2223, 2238, 2252, 2267, 2284, 2297, 2313, 2330, 2350, 2365, 2385, 2405, 2425, 2441, 2456, 2477, 2492, 2508, 2526, 2543, 2559, 2576, 2595, 2610, 2624, 2640, 2657, 2671, 2683, 2700, 2711, 2723, 2736, 2750, 2762, 2779, 2787, 2792, 2803, 2813, 2830, 2851, 2872, 2890, 2906, 2924, 2941, 2959, 2969, 2988, 3003, 3007}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
