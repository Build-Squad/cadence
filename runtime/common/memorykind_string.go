// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindStorageCapabilityValue-12]
	_ = x[MemoryKindPathLinkValue-13]
	_ = x[MemoryKindAccountLinkValue-14]
	_ = x[MemoryKindStorageReferenceValue-15]
	_ = x[MemoryKindAccountReferenceValue-16]
	_ = x[MemoryKindEphemeralReferenceValue-17]
	_ = x[MemoryKindInterpretedFunctionValue-18]
	_ = x[MemoryKindHostFunctionValue-19]
	_ = x[MemoryKindBoundFunctionValue-20]
	_ = x[MemoryKindBigInt-21]
	_ = x[MemoryKindSimpleCompositeValue-22]
	_ = x[MemoryKindPublishedValue-23]
	_ = x[MemoryKindStorageCapabilityControllerValue-24]
	_ = x[MemoryKindAtreeArrayDataSlab-25]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-26]
	_ = x[MemoryKindAtreeArrayElementOverhead-27]
	_ = x[MemoryKindAtreeMapDataSlab-28]
	_ = x[MemoryKindAtreeMapMetaDataSlab-29]
	_ = x[MemoryKindAtreeMapElementOverhead-30]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-31]
	_ = x[MemoryKindAtreeEncodedSlab-32]
	_ = x[MemoryKindPrimitiveStaticType-33]
	_ = x[MemoryKindCompositeStaticType-34]
	_ = x[MemoryKindInterfaceStaticType-35]
	_ = x[MemoryKindVariableSizedStaticType-36]
	_ = x[MemoryKindConstantSizedStaticType-37]
	_ = x[MemoryKindDictionaryStaticType-38]
	_ = x[MemoryKindOptionalStaticType-39]
	_ = x[MemoryKindRestrictedStaticType-40]
	_ = x[MemoryKindReferenceStaticType-41]
	_ = x[MemoryKindCapabilityStaticType-42]
	_ = x[MemoryKindFunctionStaticType-43]
	_ = x[MemoryKindCadenceVoidValue-44]
	_ = x[MemoryKindCadenceOptionalValue-45]
	_ = x[MemoryKindCadenceBoolValue-46]
	_ = x[MemoryKindCadenceStringValue-47]
	_ = x[MemoryKindCadenceCharacterValue-48]
	_ = x[MemoryKindCadenceAddressValue-49]
	_ = x[MemoryKindCadenceIntValue-50]
	_ = x[MemoryKindCadenceNumberValue-51]
	_ = x[MemoryKindCadenceArrayValueBase-52]
	_ = x[MemoryKindCadenceArrayValueLength-53]
	_ = x[MemoryKindCadenceDictionaryValue-54]
	_ = x[MemoryKindCadenceKeyValuePair-55]
	_ = x[MemoryKindCadenceStructValueBase-56]
	_ = x[MemoryKindCadenceStructValueSize-57]
	_ = x[MemoryKindCadenceResourceValueBase-58]
	_ = x[MemoryKindCadenceAttachmentValueBase-59]
	_ = x[MemoryKindCadenceResourceValueSize-60]
	_ = x[MemoryKindCadenceAttachmentValueSize-61]
	_ = x[MemoryKindCadenceEventValueBase-62]
	_ = x[MemoryKindCadenceEventValueSize-63]
	_ = x[MemoryKindCadenceContractValueBase-64]
	_ = x[MemoryKindCadenceContractValueSize-65]
	_ = x[MemoryKindCadenceEnumValueBase-66]
	_ = x[MemoryKindCadenceEnumValueSize-67]
	_ = x[MemoryKindCadencePathLinkValue-68]
	_ = x[MemoryKindCadenceAccountLinkValue-69]
	_ = x[MemoryKindCadencePathValue-70]
	_ = x[MemoryKindCadenceTypeValue-71]
	_ = x[MemoryKindCadenceStorageCapabilityValue-72]
	_ = x[MemoryKindCadenceFunctionValue-73]
	_ = x[MemoryKindCadenceOptionalType-74]
	_ = x[MemoryKindCadenceVariableSizedArrayType-75]
	_ = x[MemoryKindCadenceConstantSizedArrayType-76]
	_ = x[MemoryKindCadenceDictionaryType-77]
	_ = x[MemoryKindCadenceField-78]
	_ = x[MemoryKindCadenceParameter-79]
	_ = x[MemoryKindCadenceTypeParameter-80]
	_ = x[MemoryKindCadenceStructType-81]
	_ = x[MemoryKindCadenceResourceType-82]
	_ = x[MemoryKindCadenceAttachmentType-83]
	_ = x[MemoryKindCadenceEventType-84]
	_ = x[MemoryKindCadenceContractType-85]
	_ = x[MemoryKindCadenceStructInterfaceType-86]
	_ = x[MemoryKindCadenceResourceInterfaceType-87]
	_ = x[MemoryKindCadenceContractInterfaceType-88]
	_ = x[MemoryKindCadenceFunctionType-89]
	_ = x[MemoryKindCadenceReferenceType-90]
	_ = x[MemoryKindCadenceRestrictedType-91]
	_ = x[MemoryKindCadenceCapabilityType-92]
	_ = x[MemoryKindCadenceEnumType-93]
	_ = x[MemoryKindRawString-94]
	_ = x[MemoryKindAddressLocation-95]
	_ = x[MemoryKindBytes-96]
	_ = x[MemoryKindVariable-97]
	_ = x[MemoryKindCompositeTypeInfo-98]
	_ = x[MemoryKindCompositeField-99]
	_ = x[MemoryKindInvocation-100]
	_ = x[MemoryKindStorageMap-101]
	_ = x[MemoryKindStorageKey-102]
	_ = x[MemoryKindTypeToken-103]
	_ = x[MemoryKindErrorToken-104]
	_ = x[MemoryKindSpaceToken-105]
	_ = x[MemoryKindProgram-106]
	_ = x[MemoryKindIdentifier-107]
	_ = x[MemoryKindArgument-108]
	_ = x[MemoryKindBlock-109]
	_ = x[MemoryKindFunctionBlock-110]
	_ = x[MemoryKindParameter-111]
	_ = x[MemoryKindParameterList-112]
	_ = x[MemoryKindTypeParameter-113]
	_ = x[MemoryKindTypeParameterList-114]
	_ = x[MemoryKindTransfer-115]
	_ = x[MemoryKindMembers-116]
	_ = x[MemoryKindTypeAnnotation-117]
	_ = x[MemoryKindDictionaryEntry-118]
	_ = x[MemoryKindFunctionDeclaration-119]
	_ = x[MemoryKindCompositeDeclaration-120]
	_ = x[MemoryKindAttachmentDeclaration-121]
	_ = x[MemoryKindInterfaceDeclaration-122]
	_ = x[MemoryKindEnumCaseDeclaration-123]
	_ = x[MemoryKindFieldDeclaration-124]
	_ = x[MemoryKindTransactionDeclaration-125]
	_ = x[MemoryKindImportDeclaration-126]
	_ = x[MemoryKindVariableDeclaration-127]
	_ = x[MemoryKindSpecialFunctionDeclaration-128]
	_ = x[MemoryKindPragmaDeclaration-129]
	_ = x[MemoryKindAssignmentStatement-130]
	_ = x[MemoryKindBreakStatement-131]
	_ = x[MemoryKindContinueStatement-132]
	_ = x[MemoryKindEmitStatement-133]
	_ = x[MemoryKindExpressionStatement-134]
	_ = x[MemoryKindForStatement-135]
	_ = x[MemoryKindIfStatement-136]
	_ = x[MemoryKindReturnStatement-137]
	_ = x[MemoryKindSwapStatement-138]
	_ = x[MemoryKindSwitchStatement-139]
	_ = x[MemoryKindWhileStatement-140]
	_ = x[MemoryKindRemoveStatement-141]
	_ = x[MemoryKindBooleanExpression-142]
	_ = x[MemoryKindVoidExpression-143]
	_ = x[MemoryKindNilExpression-144]
	_ = x[MemoryKindStringExpression-145]
	_ = x[MemoryKindIntegerExpression-146]
	_ = x[MemoryKindFixedPointExpression-147]
	_ = x[MemoryKindArrayExpression-148]
	_ = x[MemoryKindDictionaryExpression-149]
	_ = x[MemoryKindIdentifierExpression-150]
	_ = x[MemoryKindInvocationExpression-151]
	_ = x[MemoryKindMemberExpression-152]
	_ = x[MemoryKindIndexExpression-153]
	_ = x[MemoryKindConditionalExpression-154]
	_ = x[MemoryKindUnaryExpression-155]
	_ = x[MemoryKindBinaryExpression-156]
	_ = x[MemoryKindFunctionExpression-157]
	_ = x[MemoryKindCastingExpression-158]
	_ = x[MemoryKindCreateExpression-159]
	_ = x[MemoryKindDestroyExpression-160]
	_ = x[MemoryKindReferenceExpression-161]
	_ = x[MemoryKindForceExpression-162]
	_ = x[MemoryKindPathExpression-163]
	_ = x[MemoryKindAttachExpression-164]
	_ = x[MemoryKindConstantSizedType-165]
	_ = x[MemoryKindDictionaryType-166]
	_ = x[MemoryKindFunctionType-167]
	_ = x[MemoryKindInstantiationType-168]
	_ = x[MemoryKindNominalType-169]
	_ = x[MemoryKindOptionalType-170]
	_ = x[MemoryKindReferenceType-171]
	_ = x[MemoryKindRestrictedType-172]
	_ = x[MemoryKindVariableSizedType-173]
	_ = x[MemoryKindPosition-174]
	_ = x[MemoryKindRange-175]
	_ = x[MemoryKindElaboration-176]
	_ = x[MemoryKindActivation-177]
	_ = x[MemoryKindActivationEntries-178]
	_ = x[MemoryKindVariableSizedSemaType-179]
	_ = x[MemoryKindConstantSizedSemaType-180]
	_ = x[MemoryKindDictionarySemaType-181]
	_ = x[MemoryKindOptionalSemaType-182]
	_ = x[MemoryKindRestrictedSemaType-183]
	_ = x[MemoryKindReferenceSemaType-184]
	_ = x[MemoryKindCapabilitySemaType-185]
	_ = x[MemoryKindOrderedMap-186]
	_ = x[MemoryKindOrderedMapEntryList-187]
	_ = x[MemoryKindOrderedMapEntry-188]
	_ = x[MemoryKindLast-189]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueStorageCapabilityValuePathLinkValueAccountLinkValueStorageReferenceValueAccountReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueStorageCapabilityControllerValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathLinkValueCadenceAccountLinkValueCadencePathValueCadenceTypeValueCadenceStorageCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceTypeParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 183, 196, 212, 233, 254, 277, 301, 318, 336, 342, 362, 376, 408, 426, 448, 473, 489, 509, 532, 559, 575, 594, 613, 632, 655, 678, 698, 716, 736, 755, 775, 793, 809, 829, 845, 863, 884, 903, 918, 936, 957, 980, 1002, 1021, 1043, 1065, 1089, 1115, 1139, 1165, 1186, 1207, 1231, 1255, 1275, 1295, 1315, 1338, 1354, 1370, 1399, 1419, 1438, 1467, 1496, 1517, 1529, 1545, 1565, 1582, 1601, 1622, 1638, 1657, 1683, 1711, 1739, 1758, 1778, 1799, 1820, 1835, 1844, 1859, 1864, 1872, 1889, 1903, 1913, 1923, 1933, 1942, 1952, 1962, 1969, 1979, 1987, 1992, 2005, 2014, 2027, 2040, 2057, 2065, 2072, 2086, 2101, 2120, 2140, 2161, 2181, 2200, 2216, 2238, 2255, 2274, 2300, 2317, 2336, 2350, 2367, 2380, 2399, 2411, 2422, 2437, 2450, 2465, 2479, 2494, 2511, 2525, 2538, 2554, 2571, 2591, 2606, 2626, 2646, 2666, 2682, 2697, 2718, 2733, 2749, 2767, 2784, 2800, 2817, 2836, 2851, 2865, 2881, 2898, 2912, 2924, 2941, 2952, 2964, 2977, 2991, 3008, 3016, 3021, 3032, 3042, 3059, 3080, 3101, 3119, 3135, 3153, 3170, 3188, 3198, 3217, 3232, 3236}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
