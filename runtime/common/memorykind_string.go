// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindStorageCapabilityValue-12]
	_ = x[MemoryKindPathLinkValue-13]
	_ = x[MemoryKindAccountLinkValue-14]
	_ = x[MemoryKindStorageReferenceValue-15]
	_ = x[MemoryKindAccountReferenceValue-16]
	_ = x[MemoryKindEphemeralReferenceValue-17]
	_ = x[MemoryKindInterpretedFunctionValue-18]
	_ = x[MemoryKindHostFunctionValue-19]
	_ = x[MemoryKindBoundFunctionValue-20]
	_ = x[MemoryKindBigInt-21]
	_ = x[MemoryKindSimpleCompositeValue-22]
	_ = x[MemoryKindPublishedValue-23]
	_ = x[MemoryKindStorageCapabilityControllerValue-24]
	_ = x[MemoryKindAccountCapabilityControllerValue-25]
	_ = x[MemoryKindAtreeArrayDataSlab-26]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-27]
	_ = x[MemoryKindAtreeArrayElementOverhead-28]
	_ = x[MemoryKindAtreeMapDataSlab-29]
	_ = x[MemoryKindAtreeMapMetaDataSlab-30]
	_ = x[MemoryKindAtreeMapElementOverhead-31]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-32]
	_ = x[MemoryKindAtreeEncodedSlab-33]
	_ = x[MemoryKindPrimitiveStaticType-34]
	_ = x[MemoryKindCompositeStaticType-35]
	_ = x[MemoryKindInterfaceStaticType-36]
	_ = x[MemoryKindVariableSizedStaticType-37]
	_ = x[MemoryKindConstantSizedStaticType-38]
	_ = x[MemoryKindDictionaryStaticType-39]
	_ = x[MemoryKindOptionalStaticType-40]
	_ = x[MemoryKindRestrictedStaticType-41]
	_ = x[MemoryKindReferenceStaticType-42]
	_ = x[MemoryKindCapabilityStaticType-43]
	_ = x[MemoryKindFunctionStaticType-44]
	_ = x[MemoryKindCadenceVoidValue-45]
	_ = x[MemoryKindCadenceOptionalValue-46]
	_ = x[MemoryKindCadenceBoolValue-47]
	_ = x[MemoryKindCadenceStringValue-48]
	_ = x[MemoryKindCadenceCharacterValue-49]
	_ = x[MemoryKindCadenceAddressValue-50]
	_ = x[MemoryKindCadenceIntValue-51]
	_ = x[MemoryKindCadenceNumberValue-52]
	_ = x[MemoryKindCadenceArrayValueBase-53]
	_ = x[MemoryKindCadenceArrayValueLength-54]
	_ = x[MemoryKindCadenceDictionaryValue-55]
	_ = x[MemoryKindCadenceKeyValuePair-56]
	_ = x[MemoryKindCadenceStructValueBase-57]
	_ = x[MemoryKindCadenceStructValueSize-58]
	_ = x[MemoryKindCadenceResourceValueBase-59]
	_ = x[MemoryKindCadenceAttachmentValueBase-60]
	_ = x[MemoryKindCadenceResourceValueSize-61]
	_ = x[MemoryKindCadenceAttachmentValueSize-62]
	_ = x[MemoryKindCadenceEventValueBase-63]
	_ = x[MemoryKindCadenceEventValueSize-64]
	_ = x[MemoryKindCadenceContractValueBase-65]
	_ = x[MemoryKindCadenceContractValueSize-66]
	_ = x[MemoryKindCadenceEnumValueBase-67]
	_ = x[MemoryKindCadenceEnumValueSize-68]
	_ = x[MemoryKindCadencePathLinkValue-69]
	_ = x[MemoryKindCadenceAccountLinkValue-70]
	_ = x[MemoryKindCadencePathValue-71]
	_ = x[MemoryKindCadenceTypeValue-72]
	_ = x[MemoryKindCadenceStorageCapabilityValue-73]
	_ = x[MemoryKindCadenceFunctionValue-74]
	_ = x[MemoryKindCadenceOptionalType-75]
	_ = x[MemoryKindCadenceVariableSizedArrayType-76]
	_ = x[MemoryKindCadenceConstantSizedArrayType-77]
	_ = x[MemoryKindCadenceDictionaryType-78]
	_ = x[MemoryKindCadenceField-79]
	_ = x[MemoryKindCadenceParameter-80]
	_ = x[MemoryKindCadenceTypeParameter-81]
	_ = x[MemoryKindCadenceStructType-82]
	_ = x[MemoryKindCadenceResourceType-83]
	_ = x[MemoryKindCadenceAttachmentType-84]
	_ = x[MemoryKindCadenceEventType-85]
	_ = x[MemoryKindCadenceContractType-86]
	_ = x[MemoryKindCadenceStructInterfaceType-87]
	_ = x[MemoryKindCadenceResourceInterfaceType-88]
	_ = x[MemoryKindCadenceContractInterfaceType-89]
	_ = x[MemoryKindCadenceFunctionType-90]
	_ = x[MemoryKindCadenceReferenceType-91]
	_ = x[MemoryKindCadenceRestrictedType-92]
	_ = x[MemoryKindCadenceCapabilityType-93]
	_ = x[MemoryKindCadenceEnumType-94]
	_ = x[MemoryKindRawString-95]
	_ = x[MemoryKindAddressLocation-96]
	_ = x[MemoryKindBytes-97]
	_ = x[MemoryKindVariable-98]
	_ = x[MemoryKindCompositeTypeInfo-99]
	_ = x[MemoryKindCompositeField-100]
	_ = x[MemoryKindInvocation-101]
	_ = x[MemoryKindStorageMap-102]
	_ = x[MemoryKindStorageKey-103]
	_ = x[MemoryKindTypeToken-104]
	_ = x[MemoryKindErrorToken-105]
	_ = x[MemoryKindSpaceToken-106]
	_ = x[MemoryKindProgram-107]
	_ = x[MemoryKindIdentifier-108]
	_ = x[MemoryKindArgument-109]
	_ = x[MemoryKindBlock-110]
	_ = x[MemoryKindFunctionBlock-111]
	_ = x[MemoryKindParameter-112]
	_ = x[MemoryKindParameterList-113]
	_ = x[MemoryKindTypeParameter-114]
	_ = x[MemoryKindTypeParameterList-115]
	_ = x[MemoryKindTransfer-116]
	_ = x[MemoryKindMembers-117]
	_ = x[MemoryKindTypeAnnotation-118]
	_ = x[MemoryKindDictionaryEntry-119]
	_ = x[MemoryKindFunctionDeclaration-120]
	_ = x[MemoryKindCompositeDeclaration-121]
	_ = x[MemoryKindAttachmentDeclaration-122]
	_ = x[MemoryKindInterfaceDeclaration-123]
	_ = x[MemoryKindEnumCaseDeclaration-124]
	_ = x[MemoryKindFieldDeclaration-125]
	_ = x[MemoryKindTransactionDeclaration-126]
	_ = x[MemoryKindImportDeclaration-127]
	_ = x[MemoryKindVariableDeclaration-128]
	_ = x[MemoryKindSpecialFunctionDeclaration-129]
	_ = x[MemoryKindPragmaDeclaration-130]
	_ = x[MemoryKindAssignmentStatement-131]
	_ = x[MemoryKindBreakStatement-132]
	_ = x[MemoryKindContinueStatement-133]
	_ = x[MemoryKindEmitStatement-134]
	_ = x[MemoryKindExpressionStatement-135]
	_ = x[MemoryKindForStatement-136]
	_ = x[MemoryKindIfStatement-137]
	_ = x[MemoryKindReturnStatement-138]
	_ = x[MemoryKindSwapStatement-139]
	_ = x[MemoryKindSwitchStatement-140]
	_ = x[MemoryKindWhileStatement-141]
	_ = x[MemoryKindRemoveStatement-142]
	_ = x[MemoryKindBooleanExpression-143]
	_ = x[MemoryKindVoidExpression-144]
	_ = x[MemoryKindNilExpression-145]
	_ = x[MemoryKindStringExpression-146]
	_ = x[MemoryKindIntegerExpression-147]
	_ = x[MemoryKindFixedPointExpression-148]
	_ = x[MemoryKindArrayExpression-149]
	_ = x[MemoryKindDictionaryExpression-150]
	_ = x[MemoryKindIdentifierExpression-151]
	_ = x[MemoryKindInvocationExpression-152]
	_ = x[MemoryKindMemberExpression-153]
	_ = x[MemoryKindIndexExpression-154]
	_ = x[MemoryKindConditionalExpression-155]
	_ = x[MemoryKindUnaryExpression-156]
	_ = x[MemoryKindBinaryExpression-157]
	_ = x[MemoryKindFunctionExpression-158]
	_ = x[MemoryKindCastingExpression-159]
	_ = x[MemoryKindCreateExpression-160]
	_ = x[MemoryKindDestroyExpression-161]
	_ = x[MemoryKindReferenceExpression-162]
	_ = x[MemoryKindForceExpression-163]
	_ = x[MemoryKindPathExpression-164]
	_ = x[MemoryKindAttachExpression-165]
	_ = x[MemoryKindConstantSizedType-166]
	_ = x[MemoryKindDictionaryType-167]
	_ = x[MemoryKindFunctionType-168]
	_ = x[MemoryKindInstantiationType-169]
	_ = x[MemoryKindNominalType-170]
	_ = x[MemoryKindOptionalType-171]
	_ = x[MemoryKindReferenceType-172]
	_ = x[MemoryKindRestrictedType-173]
	_ = x[MemoryKindVariableSizedType-174]
	_ = x[MemoryKindPosition-175]
	_ = x[MemoryKindRange-176]
	_ = x[MemoryKindElaboration-177]
	_ = x[MemoryKindActivation-178]
	_ = x[MemoryKindActivationEntries-179]
	_ = x[MemoryKindVariableSizedSemaType-180]
	_ = x[MemoryKindConstantSizedSemaType-181]
	_ = x[MemoryKindDictionarySemaType-182]
	_ = x[MemoryKindOptionalSemaType-183]
	_ = x[MemoryKindRestrictedSemaType-184]
	_ = x[MemoryKindReferenceSemaType-185]
	_ = x[MemoryKindCapabilitySemaType-186]
	_ = x[MemoryKindOrderedMap-187]
	_ = x[MemoryKindOrderedMapEntryList-188]
	_ = x[MemoryKindOrderedMapEntry-189]
	_ = x[MemoryKindLast-190]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueStorageCapabilityValuePathLinkValueAccountLinkValueStorageReferenceValueAccountReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueStorageCapabilityControllerValueAccountCapabilityControllerValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathLinkValueCadenceAccountLinkValueCadencePathValueCadenceTypeValueCadenceStorageCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceTypeParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 183, 196, 212, 233, 254, 277, 301, 318, 336, 342, 362, 376, 408, 440, 458, 480, 505, 521, 541, 564, 591, 607, 626, 645, 664, 687, 710, 730, 748, 768, 787, 807, 825, 841, 861, 877, 895, 916, 935, 950, 968, 989, 1012, 1034, 1053, 1075, 1097, 1121, 1147, 1171, 1197, 1218, 1239, 1263, 1287, 1307, 1327, 1347, 1370, 1386, 1402, 1431, 1451, 1470, 1499, 1528, 1549, 1561, 1577, 1597, 1614, 1633, 1654, 1670, 1689, 1715, 1743, 1771, 1790, 1810, 1831, 1852, 1867, 1876, 1891, 1896, 1904, 1921, 1935, 1945, 1955, 1965, 1974, 1984, 1994, 2001, 2011, 2019, 2024, 2037, 2046, 2059, 2072, 2089, 2097, 2104, 2118, 2133, 2152, 2172, 2193, 2213, 2232, 2248, 2270, 2287, 2306, 2332, 2349, 2368, 2382, 2399, 2412, 2431, 2443, 2454, 2469, 2482, 2497, 2511, 2526, 2543, 2557, 2570, 2586, 2603, 2623, 2638, 2658, 2678, 2698, 2714, 2729, 2750, 2765, 2781, 2799, 2816, 2832, 2849, 2868, 2883, 2897, 2913, 2930, 2944, 2956, 2973, 2984, 2996, 3009, 3023, 3040, 3048, 3053, 3064, 3074, 3091, 3112, 3133, 3151, 3167, 3185, 3202, 3220, 3230, 3249, 3264, 3268}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
