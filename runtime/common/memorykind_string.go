// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindStorageCapabilityValue-12]
	_ = x[MemoryKindPathLinkValue-13]
	_ = x[MemoryKindAccountLinkValue-14]
	_ = x[MemoryKindStorageReferenceValue-15]
	_ = x[MemoryKindAccountReferenceValue-16]
	_ = x[MemoryKindEphemeralReferenceValue-17]
	_ = x[MemoryKindInterpretedFunctionValue-18]
	_ = x[MemoryKindHostFunctionValue-19]
	_ = x[MemoryKindBoundFunctionValue-20]
	_ = x[MemoryKindBigInt-21]
	_ = x[MemoryKindSimpleCompositeValue-22]
	_ = x[MemoryKindPublishedValue-23]
	_ = x[MemoryKindAtreeArrayDataSlab-24]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-25]
	_ = x[MemoryKindAtreeArrayElementOverhead-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-30]
	_ = x[MemoryKindAtreeEncodedSlab-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindRestrictedStaticType-39]
	_ = x[MemoryKindReferenceStaticType-40]
	_ = x[MemoryKindCapabilityStaticType-41]
	_ = x[MemoryKindFunctionStaticType-42]
	_ = x[MemoryKindCadenceVoidValue-43]
	_ = x[MemoryKindCadenceOptionalValue-44]
	_ = x[MemoryKindCadenceBoolValue-45]
	_ = x[MemoryKindCadenceStringValue-46]
	_ = x[MemoryKindCadenceCharacterValue-47]
	_ = x[MemoryKindCadenceAddressValue-48]
	_ = x[MemoryKindCadenceIntValue-49]
	_ = x[MemoryKindCadenceNumberValue-50]
	_ = x[MemoryKindCadenceArrayValueBase-51]
	_ = x[MemoryKindCadenceArrayValueLength-52]
	_ = x[MemoryKindCadenceDictionaryValue-53]
	_ = x[MemoryKindCadenceKeyValuePair-54]
	_ = x[MemoryKindCadenceStructValueBase-55]
	_ = x[MemoryKindCadenceStructValueSize-56]
	_ = x[MemoryKindCadenceResourceValueBase-57]
	_ = x[MemoryKindCadenceAttachmentValueBase-58]
	_ = x[MemoryKindCadenceResourceValueSize-59]
	_ = x[MemoryKindCadenceAttachmentValueSize-60]
	_ = x[MemoryKindCadenceEventValueBase-61]
	_ = x[MemoryKindCadenceEventValueSize-62]
	_ = x[MemoryKindCadenceContractValueBase-63]
	_ = x[MemoryKindCadenceContractValueSize-64]
	_ = x[MemoryKindCadenceEnumValueBase-65]
	_ = x[MemoryKindCadenceEnumValueSize-66]
	_ = x[MemoryKindCadencePathLinkValue-67]
	_ = x[MemoryKindCadencePathValue-68]
	_ = x[MemoryKindCadenceTypeValue-69]
	_ = x[MemoryKindCadenceStorageCapabilityValue-70]
	_ = x[MemoryKindCadenceFunctionValue-71]
	_ = x[MemoryKindCadenceSimpleType-72]
	_ = x[MemoryKindCadenceOptionalType-73]
	_ = x[MemoryKindCadenceVariableSizedArrayType-74]
	_ = x[MemoryKindCadenceConstantSizedArrayType-75]
	_ = x[MemoryKindCadenceDictionaryType-76]
	_ = x[MemoryKindCadenceField-77]
	_ = x[MemoryKindCadenceParameter-78]
	_ = x[MemoryKindCadenceStructType-79]
	_ = x[MemoryKindCadenceResourceType-80]
	_ = x[MemoryKindCadenceAttachmentType-81]
	_ = x[MemoryKindCadenceEventType-82]
	_ = x[MemoryKindCadenceContractType-83]
	_ = x[MemoryKindCadenceStructInterfaceType-84]
	_ = x[MemoryKindCadenceResourceInterfaceType-85]
	_ = x[MemoryKindCadenceContractInterfaceType-86]
	_ = x[MemoryKindCadenceFunctionType-87]
	_ = x[MemoryKindCadenceReferenceType-88]
	_ = x[MemoryKindCadenceRestrictedType-89]
	_ = x[MemoryKindCadenceCapabilityType-90]
	_ = x[MemoryKindCadenceEnumType-91]
	_ = x[MemoryKindRawString-92]
	_ = x[MemoryKindAddressLocation-93]
	_ = x[MemoryKindBytes-94]
	_ = x[MemoryKindVariable-95]
	_ = x[MemoryKindCompositeTypeInfo-96]
	_ = x[MemoryKindCompositeField-97]
	_ = x[MemoryKindInvocation-98]
	_ = x[MemoryKindStorageMap-99]
	_ = x[MemoryKindStorageKey-100]
	_ = x[MemoryKindTypeToken-101]
	_ = x[MemoryKindErrorToken-102]
	_ = x[MemoryKindSpaceToken-103]
	_ = x[MemoryKindProgram-104]
	_ = x[MemoryKindIdentifier-105]
	_ = x[MemoryKindArgument-106]
	_ = x[MemoryKindBlock-107]
	_ = x[MemoryKindFunctionBlock-108]
	_ = x[MemoryKindParameter-109]
	_ = x[MemoryKindParameterList-110]
	_ = x[MemoryKindTransfer-111]
	_ = x[MemoryKindMembers-112]
	_ = x[MemoryKindTypeAnnotation-113]
	_ = x[MemoryKindDictionaryEntry-114]
	_ = x[MemoryKindFunctionDeclaration-115]
	_ = x[MemoryKindCompositeDeclaration-116]
	_ = x[MemoryKindAttachmentDeclaration-117]
	_ = x[MemoryKindInterfaceDeclaration-118]
	_ = x[MemoryKindEnumCaseDeclaration-119]
	_ = x[MemoryKindFieldDeclaration-120]
	_ = x[MemoryKindTransactionDeclaration-121]
	_ = x[MemoryKindImportDeclaration-122]
	_ = x[MemoryKindVariableDeclaration-123]
	_ = x[MemoryKindSpecialFunctionDeclaration-124]
	_ = x[MemoryKindPragmaDeclaration-125]
	_ = x[MemoryKindAssignmentStatement-126]
	_ = x[MemoryKindBreakStatement-127]
	_ = x[MemoryKindContinueStatement-128]
	_ = x[MemoryKindEmitStatement-129]
	_ = x[MemoryKindExpressionStatement-130]
	_ = x[MemoryKindForStatement-131]
	_ = x[MemoryKindIfStatement-132]
	_ = x[MemoryKindReturnStatement-133]
	_ = x[MemoryKindSwapStatement-134]
	_ = x[MemoryKindSwitchStatement-135]
	_ = x[MemoryKindWhileStatement-136]
	_ = x[MemoryKindRemoveStatement-137]
	_ = x[MemoryKindBooleanExpression-138]
	_ = x[MemoryKindVoidExpression-139]
	_ = x[MemoryKindNilExpression-140]
	_ = x[MemoryKindStringExpression-141]
	_ = x[MemoryKindIntegerExpression-142]
	_ = x[MemoryKindFixedPointExpression-143]
	_ = x[MemoryKindArrayExpression-144]
	_ = x[MemoryKindDictionaryExpression-145]
	_ = x[MemoryKindIdentifierExpression-146]
	_ = x[MemoryKindInvocationExpression-147]
	_ = x[MemoryKindMemberExpression-148]
	_ = x[MemoryKindIndexExpression-149]
	_ = x[MemoryKindConditionalExpression-150]
	_ = x[MemoryKindUnaryExpression-151]
	_ = x[MemoryKindBinaryExpression-152]
	_ = x[MemoryKindFunctionExpression-153]
	_ = x[MemoryKindCastingExpression-154]
	_ = x[MemoryKindCreateExpression-155]
	_ = x[MemoryKindDestroyExpression-156]
	_ = x[MemoryKindReferenceExpression-157]
	_ = x[MemoryKindForceExpression-158]
	_ = x[MemoryKindPathExpression-159]
	_ = x[MemoryKindAttachExpression-160]
	_ = x[MemoryKindConstantSizedType-161]
	_ = x[MemoryKindDictionaryType-162]
	_ = x[MemoryKindFunctionType-163]
	_ = x[MemoryKindInstantiationType-164]
	_ = x[MemoryKindNominalType-165]
	_ = x[MemoryKindOptionalType-166]
	_ = x[MemoryKindReferenceType-167]
	_ = x[MemoryKindRestrictedType-168]
	_ = x[MemoryKindVariableSizedType-169]
	_ = x[MemoryKindPosition-170]
	_ = x[MemoryKindRange-171]
	_ = x[MemoryKindElaboration-172]
	_ = x[MemoryKindActivation-173]
	_ = x[MemoryKindActivationEntries-174]
	_ = x[MemoryKindVariableSizedSemaType-175]
	_ = x[MemoryKindConstantSizedSemaType-176]
	_ = x[MemoryKindDictionarySemaType-177]
	_ = x[MemoryKindOptionalSemaType-178]
	_ = x[MemoryKindRestrictedSemaType-179]
	_ = x[MemoryKindReferenceSemaType-180]
	_ = x[MemoryKindCapabilitySemaType-181]
	_ = x[MemoryKindOrderedMap-182]
	_ = x[MemoryKindOrderedMapEntryList-183]
	_ = x[MemoryKindOrderedMapEntry-184]
	_ = x[MemoryKindLast-185]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueStorageCapabilityValuePathLinkValueAccountLinkValueStorageReferenceValueAccountReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathLinkValueCadencePathValueCadenceTypeValueCadenceStorageCapabilityValueCadenceFunctionValueCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 183, 196, 212, 233, 254, 277, 301, 318, 336, 342, 362, 376, 394, 416, 441, 457, 477, 500, 527, 543, 562, 581, 600, 623, 646, 666, 684, 704, 723, 743, 761, 777, 797, 813, 831, 852, 871, 886, 904, 925, 948, 970, 989, 1011, 1033, 1057, 1083, 1107, 1133, 1154, 1175, 1199, 1223, 1243, 1263, 1283, 1299, 1315, 1344, 1364, 1381, 1400, 1429, 1458, 1479, 1491, 1507, 1524, 1543, 1564, 1580, 1599, 1625, 1653, 1681, 1700, 1720, 1741, 1762, 1777, 1786, 1801, 1806, 1814, 1831, 1845, 1855, 1865, 1875, 1884, 1894, 1904, 1911, 1921, 1929, 1934, 1947, 1956, 1969, 1977, 1984, 1998, 2013, 2032, 2052, 2073, 2093, 2112, 2128, 2150, 2167, 2186, 2212, 2229, 2248, 2262, 2279, 2292, 2311, 2323, 2334, 2349, 2362, 2377, 2391, 2406, 2423, 2437, 2450, 2466, 2483, 2503, 2518, 2538, 2558, 2578, 2594, 2609, 2630, 2645, 2661, 2679, 2696, 2712, 2729, 2748, 2763, 2777, 2793, 2810, 2824, 2836, 2853, 2864, 2876, 2889, 2903, 2920, 2928, 2933, 2944, 2954, 2971, 2992, 3013, 3031, 3047, 3065, 3082, 3100, 3110, 3129, 3144, 3148}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
